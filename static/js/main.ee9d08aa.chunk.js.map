{"version":3,"sources":["elements/WelcomeScreen.js","pages.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["WelcomeScreen","props","style","welcomeStyle","src","logo","logoStyle","alt","welcomeTextStyle","textAlign","backgroundColor","height","fontSize","justifyContent","color","Welcome","element","args","this","navCallbacks","App","useState","Pages","pageStack","setPageStack","length","newPageStack","slice","page","concat","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qRAGe,SAASA,EAAcC,GAClC,OAAQ,yBAAKC,MAAOC,GAChB,yBAAKC,IAAKC,IAAMH,MAAOI,EAAWC,IAAI,wBACtC,uBAAGL,MAAOM,GAAV,qBAMR,IAAML,EAAe,CACjBM,UAAW,SACXC,gBAAiB,UACjBC,OAAQ,QAGNL,EAAY,CACdK,OAAQ,UAGNH,EAAmB,CACrBI,SAAU,qBACVC,eAAgB,SAChBC,MAAO,SCVEC,EAAb,kDACI,aAAc,uCACJf,EAAe,IAF7B,U,WAZI,WAAYgB,EAASC,GAAM,oBACvBC,KAAKF,QAAUA,EACfE,KAAKD,KAAOA,E,mDAETE,GACH,OAAOD,KAAKF,QAAL,2BACAE,KAAKD,MADL,IAEH,WAAcE,S,MCaXC,MApBf,WAAgB,IAAD,EACmBC,mBAAS,CAAC,IAAIC,IADjC,mBACRC,EADQ,KACGC,EADH,KAGTL,EAAe,CACjB,KAAQ,WACN,GAAGI,EAAUE,OAAS,EAAE,CACtB,IAAIC,EAAeH,EAAUI,MAAM,EAAGJ,EAAUE,OAAS,GACzDD,EAAaE,KAGjB,KAAQ,SAACE,GACP,IAAIF,EAAeH,EAAUM,OAAO,CAACD,IACrCJ,EAAaE,KAKjB,OADkBH,EAAUA,EAAUE,OAAS,GAC5BK,OAAOX,ICRRY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.ee9d08aa.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../logo.svg'\n\nexport default function WelcomeScreen(props) {\n    return (<div style={welcomeStyle}>\n        <img src={logo} style={logoStyle} alt='I should get a logo' />\n        <p style={welcomeTextStyle}>\n            Sweep your mind!\n        </p>\n    </div>)\n}\n\nconst welcomeStyle = {\n    textAlign: 'center',\n    backgroundColor: '#008080',\n    height: '100%'\n}\n\nconst logoStyle = {\n    height: '40vmin'\n}\n\nconst welcomeTextStyle = {\n    fontSize: 'calc(10px + 2vmin)',\n    justifyContent: 'center',\n    color: 'white'\n}","import WelcomeScreen from './elements/WelcomeScreen.js'\n\nclass Page {\n    constructor(element, args){\n        this.element = element\n        this.args = args\n    }\n    render(navCallbacks){\n        return this.element({\n            ...this.args,\n            'navigation': navCallbacks\n        })\n    }\n}\n\nexport class Welcome extends Page {\n    constructor(){\n        super(WelcomeScreen, {})\n    }\n}","import { useState } from 'react'\nimport * as Pages from './pages.js'\n\nfunction App() {\n  let [pageStack, setPageStack] = useState([new Pages.Welcome()])\n\n  let navCallbacks = {\n    'back': () => {\n      if(pageStack.length > 1){\n        let newPageStack = pageStack.slice(0, pageStack.length - 1)\n        setPageStack(newPageStack)\n      }\n    },\n    'open': (page) => {\n      let newPageStack = pageStack.concat([page])\n      setPageStack(newPageStack)\n    }\n  }\n\n  let currentPage = pageStack[pageStack.length - 1]\n  return currentPage.render(navCallbacks)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}