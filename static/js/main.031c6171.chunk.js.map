{"version":3,"sources":["elements/ActionList.js","App.js","serviceWorker.js","index.js"],"names":["ActionList","props","actions","map","action","idx","key","idMaker","addTodo","db","text","todoID","todo","_id","title","completed","put","err","result","console","log","idCtr","AppDisplay","useState","todos","updateTodos","useEffect","showTodos","className","App","PouchDB","ids","next","dbObj","cb","callback","allDocs","include_docs","descending","doc","rows","row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAceA,MAZf,SAAoBC,GAChB,IAAIC,EAAUD,EAAMC,QAEpB,OACI,4BACKA,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACR,wBAAIC,IAAKD,GAAMD,Q,WCwBtBG,GA1BV,SAASC,EAAQC,EAAIC,EAAMC,GACzB,IAAIC,EAAO,CACTC,IAAK,GAAKF,EACVG,MAAOJ,EACPK,WAAW,GAEbN,EAAGO,IAAIJ,GAAM,SAAkBK,EAAKC,GAC7BD,EAGHE,QAAQC,IAAI,6BAA+BH,GAF3CE,QAAQC,IAAI,+BAAiCV,MAkBnD,SAAUH,IAAV,uEACMc,EAAQ,EADd,OAGI,OAHJ,SAGUA,EAHV,OAIIA,GAAS,EAJb,sDAQO,SAASC,EAAWrB,GAAQ,IAAD,EAEHsB,mBAAS,IAFN,mBAEzBC,EAFyB,KAElBC,EAFkB,KAOhC,OAJAC,qBAAU,WACRzB,EAAMQ,GAAGkB,UAAUF,KAClB,CAACxB,EAAMQ,KAGR,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAAlB,oBAGA,8BACE,kBAAC,EAAD,CAAY1B,QAASsB,MAMd,SAASK,IACtB,IAAIpB,EAAK,IAAIqB,IAAQ,SACjBC,EAAMxB,IACVC,EAAQC,EAAI,iBAAkBsB,EAAIC,QAClCxB,EAAQC,EAAI,WAAYsB,EAAIC,QAE5B,IAAMC,EAAQ,CACZN,UAAW,SAASO,IA7CxB,SAAmBzB,EAAI0B,GACrB1B,EAAG2B,QAAQ,CAACC,cAAc,EAAMC,YAAY,IAAO,SAASrB,EAAKsB,GAC/D,GAAKtB,EAIHE,QAAQC,IAAI,8BAAgCH,OAJpC,CACR,IAAIO,EAAQe,EAAIC,KAAKrC,KAAI,SAAAsC,GAAG,OAAIA,EAAIF,IAAIzB,SACxCqB,EAASX,OAyCcG,CAAUlB,EAAIyB,KAGzC,OAAO,kBAACZ,EAAD,CAAYb,GAAIwB,ICzDLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.031c6171.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ActionList(props) {\n    let actions = props.actions\n\n    return (\n        <ul>\n            {actions.map((action, idx) =>\n                 <li key={idx}>{action}</li>   \n            )}\n        </ul>\n    )\n}\n\nexport default ActionList","import React, {useState, useEffect} from 'react';\nimport PouchDB from 'pouchdb'\nimport './App.css';\nimport ActionList from './elements/ActionList';\n\n\nfunction addTodo(db, text, todoID) {\n  var todo = {\n    _id: '' + todoID,\n    title: text,\n    completed: false\n  };\n  db.put(todo, function callback(err, result) {\n    if (!err) {\n      console.log('Successfully posted a todo: ' + text);\n    } else {\n      console.log('Error while posting todo: ' + err)\n    }\n  });\n}\n\nfunction showTodos(db, callback) {\n  db.allDocs({include_docs: true, descending: true}, function(err, doc) {\n    if (!err) {\n      var todos = doc.rows.map(row => row.doc.title)\n      callback(todos)\n    } else {\n      console.log('Error while loading files: ' + err)\n    }\n  });\n}\n\nfunction* idMaker() {\n  var idCtr = 0\n  while (true) {\n    yield idCtr\n    idCtr += 1\n  }\n}\n\nexport function AppDisplay(props) {\n\n  const [todos, updateTodos] = useState([])\n  useEffect(function(){\n    props.db.showTodos(updateTodos)\n  }, [props.db])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Sweep your mind!\n      </header>\n      <main>\n        <ActionList actions={todos}/>\n      </main>\n    </div>\n  );\n}\n\nexport default function App() {\n  var db = new PouchDB('todos');\n  var ids = idMaker();\n  addTodo(db, 'Take out trash', ids.next());\n  addTodo(db, 'read DDD', ids.next());\n\n  const dbObj = {\n    showTodos: function(cb){ showTodos(db, cb) }\n  }\n\n  return <AppDisplay db={dbObj}/>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}